#!/usr/bin/env python3


import argparse
import os.path
import re
from collections import namedtuple, defaultdict


def parseArgs():
    desc = """parts output files containing time -p and produce something resembling a
    summary.   Has some built-in assumptions around metadata in experiment names.
    Assumes:
"""

    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--notes", default="",
                        help="""add this to notes column""")
    parser.add_argument("summaryTsv",
                        help="""output""")
    parser.add_argument("timeLogs", nargs="+",
                        help="""runs containing time -p""")
    return parser.parse_args()

class RunMeta(namedtuple("RunMeta", ("dset", "fmt", "protocol"))):
    __slots__ = ()

class RunTime(namedtuple("RunTime", ("real", "user", "sys"))):
    __slots__ = ()
    def __add__(self, o):
        return RunTime(self.real + o.real, self.user + o.user, self.sys + o.sys)

def parseMetadata(pathName):
    # 10plusway-mapq.hdf5_gzip2.local.1.time
    # 10plusway-mapq.mmap.local.1.time
    fileName = os.path.basename(pathName)
    dset, fmt, protocol, run, ext = fileName.split('.')
    return RunMeta(dset, fmt, protocol)

def parseTimeOutput(timeLog):
    times = {}
    with open(timeLog) as fh:
        for line in fh:
            row = line.split()
            if len(row) >= 2:
                if row[0] in ('real', 'user', 'sys'):
                    times[row[0]] = float(row[1])
    return RunTime(times["real"], times["user"], times["sys"])

def collectRunResults(timeLogs):
    results = defaultdict(lambda : RunTime(0.0, 0.0, 0.0))
    for timeLog in timeLogs:
        runTime = parseTimeOutput(timeLog)
        results[parseMetadata(timeLog)] += runTime
    return results

def outputResults(results, notes, outFh):
    print("dset", "format", "protocol", "real", "user", "sys", "notes", sep='\t', file=outFh)
    for r in sorted(results.keys(), key=lambda r: (r.dset, r.protocol, r.fmt)):
        t = results[r]
        sp = "%0.2f"
        print(r.dset, r.fmt, r.protocol, sp % t.real, sp % t.user, sp % t.sys, notes, sep='\t', file=outFh)

def exprTimeReport(args):
    results = collectRunResults(args.timeLogs)
    with open(args.summaryTsv, 'w') as outFh:
        outputResults(results, args.notes, outFh)

exprTimeReport(parseArgs())
