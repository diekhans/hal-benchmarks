#!/usr/bin/env python3

import os
import argparse
from collections import namedtuple, defaultdict
import re
from benchmark import isoday, parseTimeFileMeta
import statistics

def parseArgs():
    desc = """parse UDC verbose messages from a file and print some info
"""

    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--notes", default="",
                        help="""add this to notes column""")
    parser.add_argument("summaryTsv",
                        help="""output""")
    parser.add_argument("timeLogs", nargs="+",
                        help="""runs containing time -p""")
    args = parser.parse_args()
    if os.path.splitext(args.summaryTsv)[1] != ".tsv":
        parser.error("summaryTsv must end in .tsv, got " + args.summaryTsv)
    return args

class UdcStats():
    def __init__(self, meta):
        self.meta = meta
        self.readCnt = 0
        self.readTotalSize = 0
        self.readSizes = []
        self.minReadSize = 10000000000000
        self.maxReadSize = 0
        self.reopenCnt = 0
        self.skipCnt = 0

    @property
    def medianReadSize(self):
        return int(statistics.median(self.readSizes))


def countUdcReading(line, stats):
    # reading http/https/ftp data - 8192 bytes at 196608 - on http://hgwdev.gi.ucsc.edu/~markd/hal/data/10plusway-mapq.mmap.hal
    m = re.match("reading http/https/ftp data - ([0-9]+) bytes at ([0-9]+)", line)
    byteCnt, loc = m.groups()
    byteCnt = int(byteCnt)
    loc = int(loc)
    stats.readCnt += 1
    stats.readTotalSize += int(byteCnt)
    stats.readSizes.append(byteCnt)
    stats.minReadSize = min(byteCnt, stats.minReadSize)
    stats.maxReadSize = max(byteCnt, stats.maxReadSize)

def countUdcOffset(line, stats):
    # Offset mismatch (ci 204800 != new 172032), reopening.
    stats.reopenCnt += 1

def countUdcSkipping(line, stats):
    # !! skipping 32768 bytes @33107697664 to avoid reconnect
    stats.skipCnt += 1

def countUdcMsg(line, stats):
    if line.startswith("reading http/https/ftp data"):
        countUdcReading(line, stats)
    elif line.startswith("Offset mismatch"):
        countUdcOffset(line, stats)
    elif line.startswith("!! skipping"):
        countUdcSkipping(line, stats)

def parseUdcVerboseOutput(timeLog):
    stats = UdcStats(parseTimeFileMeta(timeLog))
    with open(timeLog) as fh:
        for line in fh:
             countUdcMsg(line, stats)
    if stats.readCnt > 0:
        return stats
    else:
        return None   # not udc

def collectRunResults(timeLogs):
    results = []
    for timeLog in timeLogs:
        r = parseUdcVerboseOutput(timeLog)
        if r is not None:
            results.append(r)
    return results

def outputResults(results, notes, outFh):
    day = isoday()
    print("dset", "format", "protocol", "readCnt", "totalRead", "minRead", "maxRead", "medianRead", "reopenCnt", "skipCnt", "notes", "date", sep='\t', file=outFh)
    for s in sorted(results, key=lambda r: (r.meta.dset, r.meta.protocol, r.meta.fmt)):
        print(s.meta.dset, s.meta.fmt, s.meta.protocol,
              s.readCnt, s.readTotalSize, s.minReadSize, s.maxReadSize, s.medianReadSize,
              s.reopenCnt, s.skipCnt, notes, day, sep='\t', file=outFh)

def udcVerboseReport(args):
    results = collectRunResults(args.timeLogs)
    with open(args.summaryTsv, 'w') as outFh:
        outputResults(results, args.notes, outFh)

udcVerboseReport(parseArgs())
